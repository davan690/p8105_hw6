group_by(boro) %>%
summarise(mean_score=mean(score))
restaurant
restaurant %>%
group_by(boro)
restaurant %>%
group_by(boro) %>%
summarise(mean_score=mean(score))
?summarise
restaurant %>%
group_by(boro) %>%
summarise(mean_score=mean(score,na.rm = TRUE)) %>%
mutate(text_label = str_c("Score", mean_score) %>%
plot_ly(y = ~score, color = ~boro, type = "box",
colors = "Set2", text = ~text_label)
restaurant %>%
group_by(boro) %>%
summarise(mean_score=mean(score,na.rm = TRUE))
restaurant <- read_csv("../data/DOHMH_New_York_City_Restaurant_Inspection_Results.csv.gz",
col_types = cols(building = col_character()),
na = c("NA", "N/A")) %>%
filter(grade %in% c("A", "B", "C"),
boro != "Missing") %>%
clean_names() %>%
mutate(id=row_number(),
boro = str_to_title(boro)) %>%
select(id,boro,cuisine_description,score, violation_description, grade)
restaurant %>%
group_by(boro) %>%
summarise(mean_score=mean(score,na.rm = TRUE)) %>%
ungroup() %>%
mutate(text_label = str_c("Score", mean_score) %>%
plot_ly(y = ~score, color = ~boro, type = "box",
colors = "Set2", text = ~text_label)
View(restaurant)
restaurant %>%
group_by(boro) %>%
summarise(mean_score=mean(score,na.rm = TRUE)) %>%
ungroup()
restaurant %>%
group_by(boro) %>%
summarise(mean_score=mean(score,na.rm = TRUE)) %>%
ungroup()
restaurant %>%
plot_ly(y = ~score, color = ~boro, type = "box",
colors = "Set2", text = ~text_label)
restaurant %>%
plot_ly(y = ~score, color = ~boro, type = "box",
colors = "Set2")
rm(list = ls())
library(faraway)
library(broom)
library(dplyr)
setwd("D:\Study\2017 Fall\Biostat methods 1\P8130.Lecture14")
data_hosp<-read.csv("Hospital.csv")
names(data_hosp)
setwd("D:\Study\2017 Fall\Biostat methods 1\P8130.Lecture14")
data_hosp<-read.csv(".\Hospital.csv")
names(data_hosp)
setwd("D:\Study\2017 Fall\Biostat methods 1\P8130.Lecture14")
data_hosp<-read_csv("./Hospital.csv")
names(data_hosp)
setwd("D:\Study\2017 Fall\Biostat methods 1\P8130.Lecture14")
data_hosp<-read_csv("../Hospital.csv")
names(data_hosp)
data_hosp<-read_csv("D:\Study\2017 Fall\Biostat methods 1\P8130.Lecture14\Hospital.csv")
names(data_hosp)
data_hosp<-read_csv("D:\\Study\\2017 Fall\\Biostat methods 1\\P8130.Lecture14\\Hospital.csv")
names(data_hosp)
data_hosp<-read.csv("D:\\Study\\2017 Fall\\Biostat methods 1\\P8130.Lecture14\\Hospital.csv")
names(data_hosp)
reg1<-lm(LOS~BEDS + INFRISK, data=data_hosp)
summary(reg1)
View(data_hosp)
rm(list = ls())
# Load libraries
library(faraway)
library(broom)
library(dplyr)
# Read data 'Hospitals'
data_hosp<-read.csv("D:\\Study\\2017 Fall\\Biostat methods 1\\P8130.Lecture14\\Hospital.csv")
# MLR Model 1: Length of stay (LOS) vs number of BEDS and INFRISK
reg1<-lm(LOS~BEDS + INFRISK, data=data_hosp)
summary(reg1)
# MLR Model 2: BEDS, INFRISK, new MS (Medical School Affiliation: 1-Yes, 0-No), NURSE
# MLR
data_hosp$MS <- ifelse(data_hosp$MEDSCHL== 1, 1, ifelse(data_hosp$MEDSCHL == 2, 0, NA))
reg2<-lm(LOS~BEDS + INFRISK + MS + NURSE, data=data_hosp)
summary(reg2)
SSE1 <- sum(reg1$residuals^2)
SSE2 <- sum(reg2$residuals^2)
#degrees of freedom
df1 <- 113-3
df2 <- 113-5
#test statistics
F_test <- ((SSE1 - SSE2)/(df1 - df2))/(SSE2/df2)
#F(df2-df1, df2)
qf(0.95, df1 - df2, df2)
#result
F_test>qf(0.95, df1 - df2, df2)
rm(list = ls())
library(readxl)
library(tidyverse)
library(janitor)
library(stringr)
library(plotly)
library(flexdashboard)
#read and clean data
nyc_inspections <-
read_csv("../data/DOHMH_New_York_City_Restaurant_Inspection_Results.csv.gz",
col_types = cols(building = col_character()),
na = c("NA", "N/A")) %>%
clean_names() %>%
filter(grade %in% c("A", "B", "C"),
boro != "Missing") %>%
mutate(inspection_num = row_number(),
boro = str_to_title(boro)) %>%
select(inspection_num, boro, grade, score, critical_flag, cuisine_description)
nyc_inspections %>%
group_by(boro, cuisine_description) %>%
summarise(aver_score = mean(score),
num_inspections = n(),
A_num = sum(grade == "A"),
A_percent = sum(grade == "A")/n(),
critaical_percent = sum(grade == "A")/n()) %>%
mutate(text_label = str_c("Boro: ", boro, '\nCuisine: ', cuisine_description,
'\nnumber of inspection:', num_inspections, '\nnumber of A:', A_num,
'\n A%:', paste(round(A_percent*100,digits = 2),"%",sep = "")),
'\n critical%:', paste(round(critaical_percent*100,digits = 2),"%",sep = "")) %>%
plot_ly(x = ~A_percent, y = ~aver_score, type = "scatter", mode = "markers",
alpha = 0.7, color = ~boro, text = ~text_label)
cuisine_boxplot <-
nyc_inspections %>%
filter(boro == "Manhattan") %>%
group_by(cuisine_description) %>%
summarise(num_inspections = n()) %>%
top_n(5, num_inspections) %>%
pull(cuisine_description)
nyc_inspections %>%
filter(boro == "Manhattan",
cuisine_description %in% cuisine_boxplot) %>%
plot_ly(y = ~score, color = ~cuisine_description, type = "box", colors = "Set2")
nyc_inspections %>%
group_by(boro, cuisine_description) %>%
summarise(aver_score = mean(score),
num_inspections = n(),
A_num = sum(grade == "A"),
A_percent = sum(grade == "A")/n(),
critaical_percent = sum(grade == "A")/n()) %>%
mutate(text_label = str_c("Boro: ", boro, '\nCuisine: ', cuisine_description,
'\nnumber of inspection:', num_inspections, '\nnumber of A:', A_num,
'\n A%:', paste(round(A_percent*100, digits = 2),"%",sep = "")),
'\n critical%:', paste(round(critaical_percent*100, digits = 2),"%",sep = "")) %>%
filter(boro == "Manhattan") %>%
plot_ly(x = ~cuisine_description, y = ~aver_score, color = ~cuisine_description, type = "bar", text = ~text_label) %>%
layout(showlegend = FALSE)
rm(list = ls())
library(readxl)
library(tidyverse)
library(janitor)
library(stringr)
library(plotly)
library(flexdashboard)
#read and clean data
nyc_inspections <-
read_csv("../data/DOHMH_New_York_City_Restaurant_Inspection_Results.csv.gz",
col_types = cols(building = col_character()),
na = c("NA", "N/A")) %>%
clean_names() %>%
filter(grade %in% c("A", "B", "C"),
boro != "Missing") %>%
mutate(inspection_num = row_number(),
boro = str_to_title(boro)) %>%
select(inspection_num, boro, grade, score, critical_flag, cuisine_description)
nyc_inspections %>%
group_by(boro, cuisine_description) %>%
summarise(aver_score = mean(score),
num_inspections = n(),
A_num = sum(grade == "A"),
A_percent = sum(grade == "A")/n(),
critaical_percent = sum(grade == "A")/n()) %>%
mutate(text_label = str_c("Boro: ", boro, '\nCuisine: ', cuisine_description,
'\nnumber of inspection:', num_inspections, '\nnumber of A:', A_num,
'\n A%:', paste(round(A_percent*100,digits = 2),"%",sep = "")),
'\n critical%:', paste(round(critaical_percent*100,digits = 2),"%",sep = "")) %>%
plot_ly(x = ~A_percent, y = ~aver_score, type = "scatter", mode = "markers",
alpha = 0.7, color = ~boro, text = ~text_label)
cuisine_boxplot <-
nyc_inspections %>%
filter(boro == "Manhattan") %>%
group_by(cuisine_description) %>%
summarise(num_inspections = n()) %>%
top_n(5, num_inspections) %>%
pull(cuisine_description)
nyc_inspections %>%
filter(boro == "Manhattan",
cuisine_description %in% cuisine_boxplot) %>%
plot_ly(y = ~score, color = ~cuisine_description, type = "box", colors = "Set2")
nyc_inspections %>%
group_by(boro, cuisine_description) %>%
summarise(aver_score = mean(score),
num_inspections = n(),
A_num = sum(grade == "A"),
A_percent = sum(grade == "A")/n(),
critaical_percent = sum(grade == "A")/n()) %>%
mutate(text_label = str_c("Boro: ", boro, '\nCuisine: ', cuisine_description,
'\nnumber of inspection:', num_inspections, '\nnumber of A:', A_num,
'\n A%:', paste(round(A_percent*100, digits = 2),"%",sep = "")),
'\n critical%:', paste(round(critaical_percent*100, digits = 2),"%",sep = "")) %>%
filter(boro == "Manhattan") %>%
plot_ly(x = ~cuisine_description, y = ~aver_score, color = ~cuisine_description, type = "bar", text = ~text_label) %>%
layout(showlegend = FALSE)
knitr::opts_chunk$set(echo = FALSE)
library(flexdashboard)
library(tidyverse)
library(janitor)
library(stringr)
library(forcats)
library(plotly)
library(shiny)
#read and clean data
nyc_inspections <-
read_csv("../data/DOHMH_New_York_City_Restaurant_Inspection_Results.csv.gz",
col_types = cols(building = col_character()),
na = c("NA", "N/A")) %>%
clean_names() %>%
filter(grade %in% c("A", "B", "C"),
boro != "Missing") %>%
mutate(inspection_num = row_number(),
boro = str_to_title(boro)) %>%
select(inspection_num, boro, grade, score, critical_flag, cuisine_description)
boros <-
nyc_inspections %>% distinct(boro) %>% pull()
cuisines <-
nyc_inspections %>% distinct(cuisine_description) %>% pull()
#radioButtons widget
radioButtons("boro_choice", label = h3("Select boro"),
choices = boros, selected = "Manhattan")
#sliderInput widget
#max_A_pecent <- 1
#min_A_percent <- 0
#sliderInput("pecent_A", label = h3("Choose A% range"),
#            min = min_A_percent, max = max_A_pecent, value = c(0.2, 0.8))
#max_score = nyc_inspections %>% distinct(score) %>% na.omit %>% max()
#min_score = nyc_inspections %>% distinct(score) %>% na.omit %>% min()
# sliderInput widget
#sliderInput("score_range", label = h3("Choose score range"), min = min_score,
#        max = max_score, value = c(20, 60))
#selectInput widget
selectInput("select_critical_flag", label = h3("Select critical flag"),
choices = list("Critical" = "Critical", "Not Critical" = "Not Critical", "Not Applicable" = "Not Applicable"),
selected = "Critical")
renderPlotly({
nyc_inspections %>%
group_by(boro, cuisine_description, critical_flag) %>%
summarise(aver_score = mean(score),
num_inspections = n(),
A_num = sum(grade == "A"),
A_percent = sum(grade == "A")/n(),
critaical_percent = sum(grade == "A")/n()) %>%
filter(boro == input$boro_choice,
#score %in% input$score_range[1]:input$score_range[2]) %>%
#A_percent %in% input$pecent_A[1]:input$pecent_A[2]) %>%
critical_flag == input$select_critical_flag) %>%
mutate(text_label = str_c("Boro: ", boro, '\nCuisine: ', cuisine_description,
'\nnumber of inspection:', num_inspections, '\nnumber of A:', A_num,
'\n A%:', paste(round(A_percent*100,digits = 2),"%",sep = "")),
'\n critical%:', paste(round(critaical_percent*100,digits = 2),"%",sep = "")) %>%
plot_ly(x = ~A_percent, y = ~aver_score, type = "scatter", mode = "markers",
alpha = 0.7, color = ~boro, text = ~text_label)
})
renderPlotly({
cuisine_boxplot <-
nyc_inspections %>%
filter(boro == input$boro_choice) %>%
group_by(cuisine_description) %>%
summarise(num_inspections = n()) %>%
top_n(5, num_inspections) %>%
pull(cuisine_description)
nyc_inspections %>%
filter(boro == input$boro_choice,
cuisine_description %in% cuisine_boxplot,
critical_flag == input$select_critical_flag) %>%
plot_ly(y = ~score, color = ~cuisine_description, type = "box", colors = "Set2")
})
View(nyc_inspections)
knitr::opts_chunk$set(echo = FALSE)
library(flexdashboard)
library(tidyverse)
library(janitor)
library(stringr)
library(forcats)
library(plotly)
library(shiny)
library(MASS)
#read, clean data and sample
nyc_inspections <-
read_csv("../data/DOHMH_New_York_City_Restaurant_Inspection_Results.csv.gz",
col_types = cols(building = col_character()),
na = c("NA", "N/A")) %>%
clean_names() %>%
filter(grade %in% c("A", "B", "C"),
boro != "Missing") %>%
mutate(inspection_num = row_number(),
boro = str_to_title(boro)) %>%
select(inspection_num, boro, grade, score, critical_flag, cuisine_description) %>%
sample(1000)
View(nyc_inspections)
View(nyc_inspections)
#read, clean data and sample
nyc_inspections <-
read_csv("../data/DOHMH_New_York_City_Restaurant_Inspection_Results.csv.gz",
col_types = cols(building = col_character()),
na = c("NA", "N/A")) %>%
clean_names() %>%
filter(grade %in% c("A", "B", "C"),
boro != "Missing") %>%
mutate(inspection_num = row_number(),
boro = str_to_title(boro)) %>%
select(inspection_num, boro, grade, score, critical_flag, cuisine_description) %>%
sample(1000)
nyc_inspections <-
read_csv("../data/DOHMH_New_York_City_Restaurant_Inspection_Results.csv.gz",
col_types = cols(building = col_character()),
na = c("NA", "N/A"))
#read, clean data and sample
nyc_inspections <-
read_csv("../data/DOHMH_New_York_City_Restaurant_Inspection_Results.csv.gz",
col_types = cols(building = col_character()),
na = c("NA", "N/A")) %>%
clean_names() %>%
filter(grade %in% c("A", "B", "C"),
boro != "Missing") %>%
mutate(inspection_num = row_number(),
boro = str_to_title(boro)) %>%
select(inspection_num, boro, grade, score, critical_flag, cuisine_description) %>%
sample(1000)
#read and clean data
nyc_inspections <-
read_csv("../data/DOHMH_New_York_City_Restaurant_Inspection_Results.csv.gz",
col_types = cols(building = col_character()),
na = c("NA", "N/A")) %>%
clean_names() %>%
filter(grade %in% c("A", "B", "C"),
boro != "Missing") %>%
mutate(inspection_num = row_number(),
boro = str_to_title(boro)) %>%
select(inspection_num, boro, grade, score, critical_flag, cuisine_description)
View(nyc_inspections)
View(nyc_inspections)
install.packages("janitor")
rm(list = ls())
library(readxl)
library(tidyverse)
library(janitor)
library(stringr)
library(plotly)
library(flexdashboard)
#read and clean data
nyc_inspections <-
read_csv("./data/DOHMH_New_York_City_Restaurant_Inspection_Results.csv.gz",
col_types = cols(building = col_character()),
na = c("NA", "N/A")) %>%
clean_names() %>%
filter(grade %in% c("A", "B", "C"),
boro != "Missing") %>%
mutate(inspection_num = row_number(),
boro = str_to_title(boro)) %>%
select(inspection_num, boro, grade, score, critical_flag, cuisine_description)
library(shiny)
runApp('shiny')
knitr::opts_chunk$set(echo = FALSE)
library(flexdashboard)
library(tidyverse)
library(janitor)
library(stringr)
library(forcats)
library(plotly)
library(shiny)
#read, clean data and sample
nyc_inspections <-
read_csv("./data/DOHMH_New_York_City_Restaurant_Inspection_Results.csv.gz",
col_types = cols(building = col_character()),
na = c("NA", "N/A")) %>%
clean_names() %>%
filter(grade %in% c("A", "B", "C"),
boro != "Missing") %>%
mutate(inspection_num = row_number(),
boro = str_to_title(boro)) %>%
select(inspection_num, boro, grade, score, critical_flag, cuisine_description)
boros <-
nyc_inspections %>% distinct(boro) %>% pull()
cuisines <-
nyc_inspections %>% distinct(cuisine_description) %>% pull()
#radioButtons widget
radioButtons("boro_choice", label = h3("Select boro"),
choices = boros, selected = "Manhattan")
#selectInput widget
selectInput("select_critical_flag", label = h3("Select critical flag"),
choices = list("Critical" = "Critical", "Not Critical" = "Not Critical", "Not Applicable" = "Not Applicable"),
selected = "Critical")
renderPlotly({
nyc_inspections %>%
group_by(boro, cuisine_description, critical_flag) %>%
summarise(aver_score = mean(score),
num_inspections = n(),
A_num = sum(grade == "A"),
A_percent = sum(grade == "A")/n(),
critaical_percent = sum(grade == "A")/n()) %>%
filter(boro == input$boro_choice,
critical_flag == input$select_critical_flag) %>%
mutate(text_label = str_c("Boro: ", boro, '\nCuisine: ', cuisine_description,
'\nnumber of inspection:', num_inspections, '\nnumber of A:', A_num,
'\n A%:', paste(round(A_percent*100,digits = 2),"%",sep = "")),
'\n critical%:', paste(round(critaical_percent*100,digits = 2),"%",sep = "")) %>%
plot_ly(x = ~A_percent, y = ~aver_score, type = "scatter", mode = "markers",
alpha = 0.7, color = ~boro, text = ~text_label)
})
renderPlotly({
cuisine_boxplot <-
nyc_inspections %>%
filter(boro == input$boro_choice) %>%
group_by(cuisine_description) %>%
summarise(num_inspections = n()) %>%
top_n(5, num_inspections) %>%
pull(cuisine_description)
nyc_inspections %>%
filter(boro == input$boro_choice,
cuisine_description %in% cuisine_boxplot,
critical_flag == input$select_critical_flag) %>%
plot_ly(y = ~score, color = ~cuisine_description, type = "box", colors = "Set2")
})
renderPlotly({
nyc_inspections %>%
group_by(boro, cuisine_description, critical_flag) %>%
summarise(aver_score = mean(score),
num_inspections = n(),
A_num = sum(grade == "A"),
A_percent = sum(grade == "A")/n(),
critaical_percent = sum(grade == "A")/n()) %>%
mutate(text_label = str_c("Boro: ", boro, '\nCuisine: ', cuisine_description,
'\nnumber of inspection:', num_inspections, '\nnumber of A:', A_num,
'\n A%:', paste(round(A_percent*100, digits = 2),"%",sep = "")),
'\n critical%:', paste(round(critaical_percent*100, digits = 2),"%",sep = "")) %>%
filter(boro == input$boro_choice,
critical_flag == input$select_critical_flag) %>%
plot_ly(x = ~cuisine_description, y = ~aver_score, color = ~cuisine_description, type = "bar", text = ~text_label) %>%
layout(showlegend = FALSE)
})
rsconnect::deployApp()
nyc_inspections
rm(list = ls())
library(readxl)
library(tidyverse)
library(janitor)
library(stringr)
library(plotly)
library(flexdashboard)
#read and clean data
nyc_inspections <-
read_csv("./data/DOHMH_New_York_City_Restaurant_Inspection_Results.csv.gz",
col_types = cols(building = col_character()),
na = c("NA", "N/A")) %>%
clean_names() %>%
filter(grade %in% c("A", "B", "C"),
boro != "Missing") %>%
mutate(inspection_num = row_number(),
boro = str_to_title(boro)) %>%
select(inspection_num, boro, grade, score, critical_flag, cuisine_description)
colourCount = length(unique(nyc_inspections$))
length(unique(nyc_inspections$inspection_num))
colourCount = length(unique(nyc_inspections$inspection_num))
getPalette = colorRampPalette(brewer.pal(9, "Set1"))
install.packages("RColorBrewer")
colourCount = length(unique(nyc_inspections$inspection_num))
getPalette = colorRampPalette(brewer.pal(9, "Set1"))
colourCount = length(unique(nyc_inspections$inspection_num))
getPalette = colorRampPalette(brewer.pal(9, "Set1"))
rm(list = ls())
library(readxl)
library(tidyverse)
library(janitor)
library(stringr)
library(plotly)
library(flexdashboard)
library(RColorBrewer)
#read and clean data
nyc_inspections <-
read_csv("./data/DOHMH_New_York_City_Restaurant_Inspection_Results.csv.gz",
col_types = cols(building = col_character()),
na = c("NA", "N/A")) %>%
clean_names() %>%
filter(grade %in% c("A", "B", "C"),
boro != "Missing") %>%
mutate(inspection_num = row_number(),
boro = str_to_title(boro)) %>%
select(inspection_num, boro, grade, score, critical_flag, cuisine_description)
colourCount = length(unique(nyc_inspections$inspection_num))
getPalette = colorRampPalette(brewer.pal(9, "Set1"))
nyc_inspections %>%
group_by(boro, cuisine_description) %>%
summarise(aver_score = mean(score),
num_inspections = n(),
A_num = sum(grade == "A"),
A_percent = sum(grade == "A")/n(),
critaical_percent = sum(grade == "A")/n()) %>%
mutate(text_label = str_c("Boro: ", boro, '\nCuisine: ', cuisine_description,
'\nnumber of inspection:', num_inspections, '\nnumber of A:', A_num,
'\n A%:', paste(round(A_percent*100,digits = 2),"%",sep = "")),
'\n critical%:', paste(round(critaical_percent*100,digits = 2),"%",sep = "")) %>%
plot_ly(x = ~A_percent, y = ~aver_score, type = "scatter", mode = "markers",
alpha = 0.7, color = ~boro, text = ~text_label)
